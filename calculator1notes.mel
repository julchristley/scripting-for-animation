//calculator ($input[], $operation)o

// adding anything(string in this case) before NamePicker() proc means you need to return the function
proc string NamePicker()
{
   string $names[] = {"Dave", "Doug", "Clarence", "Mary", "Tina", "Phil"};
    int $size = size($names);
    int $randNum = `rand $size`;
    //print ($names[$randNum] + "\n");

    return ($names[$randNum]);
}

proc int RandomNumber(int $num)
{
    int $randNum = `rand $num`;
    print ("This random number is " + $randNum + ("\n"));
    return ($randNum);
}
 
print (NamePicker() + "'s favorite number is " + RandomNumber(100) + "!\n");

print(RandomNumber(100) + RandomNumber(100));


// 100 in the random numbers makes array 1 to 100

//fortune teller
// lottery number
// bestest friend
// fortune
// zodiac sign

//generate random lottery numbers
global proc string LotteryNumbers()
{
    int $values[];
    for ($i=0; $i < 7; $i++)
    {
        int $num = `rand 100`;
        $values[size($values)] = $num;
    }

    return (intArrayToString($values, " - "));
}

print (LotteryNumbers());


global proc BestestFriend(string $name)
{
   string $names[] = {"Dave", "Doug", "Clarence", "Mary", "Tina", "Phil"};
    int $size = size($names);
    int $randNum = `rand $size`;
    print ($name + ", your new bestest friend will be named " + $names[$randNum] + "!\n");
}

BestestFriend("Tim");


global proc FortuneCookie()
{
   string $fortunes[] = {"long fortune 1", "long fortune 2", "long fortune 3"};
    
    int $randNum = `rand (size($fortunes))`;
    print($fortunes[$randNum] + "\n");
}

FortuneCookie();

global proc string Zodiac(int $birthYear)
{
    string $signs[] = {"Rat","Ox","Tiger","Rabbit","Dragon","Snake","Horse","Sheep","Monkey","Rooster","Dog","Pig"};
    int $index = ($birthYear - 4) % 12; //needs to be divisible by 12 (12 signs), and get a remainder of 0(?)
    
    return $signs[$index];
    
}

print (Zodiac(2005));


global proc FortuneTeller(string $myName, int $myBirthYear, int $operation)
{
    if ($operation == 1)
    {
        print ("Your lucky numbers for today are: " + LotteryNumbers() + "\n");
    }
    else if ($operation == 2)
    {
        BestestFriend($myName);
    }
    else if($operation == 3)
    {
        FortuneCookie();
    }
    else if ($operation == 4)
    {
        print ("Based on your birth year, " + $myBirthYear + ", your zodiac sign is the " + Zodiac($myBirthYear) + "\n");
        
        Zodiac($myBirthYear);
    }
    else
    {
        print ("Please input a valid operation type as a value, 1 through 4");
    }
}

FortuneTeller("Melissa", 2005, 4);


if ($sign == 0)
        print ("Rat");
    else if ($sign == 2)



add ($input[])   [2,6,8,4,0,1,8]
subtract
multiply   for ($i = 0; $i < size($input); $i++0)
            $input[$i]+$input[$i-1]
divide
mean
median


proc test (float $input[])
{
   for($i=0; $i<size($input); $i++)
   {
      if ($input[$i] % 2 == 0)
    {
        break;
    }
    print ($input[$i] + "\n"); 
    }  
}


test(1,4,7);








calculator 2

Calculator($input[], $operation)
{
    if ($operation == "add");
    {
        $result = Add($input); // this input might be different than $input[]?? also, Add is a function
    }
    else if ($operation == "subtract")
    {
        $result = Subtract($input); // subtract is a function
    }
}

// returns random age value between min max inputs
global proc int age(int $input[])
{
    int $minAge = $input[0];
    int $maxAge = $input[1];
    int $age = int(`rand $minAge $maxAge`);
    return $age;
}

print (age{18, 90});

global proc insults($value)
{
    string $insult;
    if($value < 25)
    {
        $insult = "nerd!";
    }
    else if($value < 50);
    {
        $insult = "Old fart!";
    }
    else if ($value < 75)
    {
        $insult = "Dentures!";
    }
    else
    {
        $insult = "One foot in the grave, huh?";
    }
    return insult;
}

global proc insultGenerator(int $ages[])
{
    string $insultResult;
    int $ageResult = age($ages)
    $insultResult = "You are " + $ageResult + " years old. ";

    $insultResult += insults($ageResult);
    print $insultResult;
}

insultGenerator({10,150}); // lotta errors in this one