// get selection, find position, calculate center, create/move locator to center position
proc CenterLoc()   // this doesn't work :/ need to combine geometry into one to create a bounding box
{
    string $sels[] = `ls -sl`;

    float $bbox[] = `xform -q -boundingBox $sels`;
    float $centerX;
    float $centery;
    float $centerZ;

    //xmin ymin zmin xmax ymax zmax
    // 0    1    2    3    4    5

    float $centerX = ($bbox[0] + $bbox[3]) / 2;
    float $centerY = ($bbox[1] + $bbox[4]) / 2;
    float $centerZ = ($bbox[2] + $bbox[5]) / 2;

    string $loc =  `spaceLocator -p 0 0 0 `;
    xform -worldSpace -translation $centerX $centerY $centerZ $loc[];
}
 
 CenterLoc();

//pay atention to structure of ui
window; 
    columnLayout;
        button; 
        button; 
        intField; 
        rowLayout -numberOfColumns 3;
            button;
            columnLayout;
                button; 
                button;
                button;
                setParent ..;
                button;


showWindow;


string $mWindow = `window`; 
string $mColumn = `columnLayout`;
string $mRow = `rowLayout -numberOfColumns 3`;
string $rColumn = `columnLayout -p $mRow`;

button -p $mColumn; // specifying that the parent is mColumn
button -p $mColumn; 
intField -p $mColumn; 
button -p $mRow;
button -p $rColumn; 
button -p $mRow;
button -p $mColumn;
button -p $rColumn;


showWindow;


global proc Add()
{
    string $field1 = `optionVar -q "firstField"`;
    string $field2 = `optionVar -q "secondField"`;
    string $field3 = `optionVar -q "thirdField"`;
    string $field4 = `optionVar -q "myTextField"`;

    float $value1 = `floatField -q -value $field1`;
    float $value2 = `floatField -q -value $field2`;

    float $sum = $value1 + $value2;

    floatField -e -value $sum $field3; //edits 3rd value
    textField -e -text ("The sum of " + $value1 + " and " + $value2 + " is " + $sum + ".") $field4;
}


global proc WhatsInFloatField()
{
    string $field1 = `optionVar -q "firstField"`;
    print ($field1 + "\n");
   print (`floatField -q -value $field1`);
}

string $mWindow = "test_ui";

 if (`window -exists $mWindow`)
 {
    deleteUI $mWindow;  // deletes mwindow if it already exists, always check this
 }

$mWindow = `window -height 300
                          -title "example window"
                          -sizeable 1
                          -width 400
                          $mWindow`;
string $mColumn = `columnLayout - adjustableColumn 1
                                - parent $mWindow`;
button -parent $mColumn -label "Say Hello!" -command "print(\"Hello World!\")";

optionVar -stringValue "firstField" `floatField`;
optionVar -stringValue "secondField" `floatField`;
optionVar -stringValue "thirdField" `floatField -editable 0`;
optionVar -stringValue "myTextfield" `textField -editable 0`;

button -parent $mColumn -label "print Field Value" -command WhatsInFloatField;
button -parent $mColumn -label "Add Numbers!" -command Add;

showWindow $mWindow;
















global proc string LotteryNumbers()
{
    int $values[];
    for ($i=0; $i < 7; $i++)
    {
        int $num = `rand 100`;
        $values[size($values)] = $num;
    }

    return (intArrayToString($values, " - "));
}

print (LotteryNumbers());


global proc string BestestFriend(string $name)
{
   string $names[] = {"Dave", "Doug", "Clarence", "Mary", "Tina", "Phil"};
    int $size = size($names);
    int $randNum = `rand $size`;
    return ($name + ", your new bestest friend will be named " + $names[$randNum] + "!");
}

BestestFriend("Tim");


global proc string FortuneCookie()
{
   string $fortunes[] = {"long fortune 1", "long fortune 2", "long fortune 3"};
    
    int $randNum = `rand (size($fortunes))`;
    return ($fortunes[$randNum]);
}

FortuneCookie();

global proc string Zodiac(int $birthYear)
{
    string $signs[] = {"Rat","Ox","Tiger","Rabbit","Dragon","Snake","Horse","Sheep","Monkey","Rooster","Dog","Pig"};
    int $index = ($birthYear - 4) % 12; //needs to be divisible by 12 (12 signs), and get a remainder of 0(?)
    
    return $signs[$index];
    
}


global proc string FortuneTeller(string $myName, int $myBirthYear, int $operation)
{
    if ($operation == 1)
    {
        return ("Your lucky numbers for today are: " + LotteryNumbers() + ".");
    }
    else if ($operation == 2)
    {
        return(BestestFriend($myName));
    }
    else if($operation == 3)
    {
        return(FortuneCookie());
    }
    else if ($operation == 4)
    {
        return ("Based on your birth year, " + $myBirthYear + ", your zodiac sign is the " + Zodiac($myBirthYear) + ".");
        
        Zodiac($myBirthYear);
    }
    else
    {
        print ("Please input a valid operation type as a value, 1 through 4");
    }
}

global proc FT_ButtonCmd()
{
    string $nameField = `optionVar -q "ftNameField"`;
    string $yearField = `optionVar -q "ftYearField"`;
    string $operField = `optionVar -q "ftOperation"`;
    string $resultField = `optionVar -q "ftResult"`;

    string $name = `textField -q -text $nameField`;
    string $year = `intField -q -value $yearField`;
    string $oper = `radioButtonGrp -q -select $operField`;

    string $result = FortuneTeller($name, $year, $oper);
    textField -e -text $result $resultField;

}

global proc FortuneUI()
{
    string $mWindow = "ftWindow";
    if (`window -exists $mWindow`)
        deleteUI $mWindow;

        $mWindow = `window -title "Fortune Teller" 
                                -widthHeight 300 400
                                -resizeToFitChildren 1
                                $mWindow`;
        string $mColumn = `columnLayout -parent $mWindow -adjustableColumn 1`;
        optionVar -stringValue "ftNameField" `textField -parent $mColumn -placeholderText "Enter name here..."`;
        optionVar -stringValue "ftYearField" `intField -parent $mColumn`;
        optionVar -stringValue "ftOperation" `radioButtonGrp -parent $mColumn -numberOfRadioButtons 4 -labelArray4 "Lucky Numbers" "Best Friend" "Fortune Cookie" "Zodiac Sign"`;
        button -parent $mColumn -label "GO!" -command "FT_ButtonCmd";
        optionVar -stringValue "ftResult" `textField -parent $mColumn -editable 0`;
        showWindow $mWindow;

}
FortuneUI();







// skeleton for 5A
global proc RandomPlacement($xMin, $xMax, $numDups) //parameters for UI
{
    // use ls command with -selection (-sl) to get selection
    string $sels[] = `ls -sl`;

    for($i=0, $i< size($sels); $i++) //deciding which object you're duplicating
    {
        for(j = 0; j<$numDups; $j++) // actually duplicating object
        {
            //duplicate object, design to new variable - new name = ($sels[$i]), probably
            //need to generate 3 random numbers based on min and max of UI (xmin and xmax), (ymin, ymax), (zmin, zmax)
            //move to random position based on the 3 generated numbers, use xform
        }
    }
}

//5A UI in class notes
window
. 
.
.
    .
    .
    .
button -Command "RandomPlacement(xMin, xMax, other parameters)";  // in command "", runs what's in there





















global proc float GetSum(float $input[])
{
    float $sum = 0;
    for ($i=0; $i <size($input); $i++)
    {
        $sum += $input[$i];
    }
    return $sum;
}

global proc float GetDifference(float $input[])
{
    float $difference = $input[0];
    for ($i = 1; $i <size($input); $i++)
    {
        $difference -=$input[$i];
    }
    return $difference;
}

global proc float GetProduct(float $input[])
{
    float $product = $input[0];
    for ($i=1; $i <size($input); $i++)
    {
        $product *= $input[$i];
    }
    return $product;
}

global proc float GetQuotient(float $input[])
{
    float $quotient = $input[0];
    for ($i=1; $i <size($input); $i++)
    {
        $quotient /=$input[$i];
    }
    return $quotient;
}

global proc float GetPower(float $input[])
{
    float $power = $input[0];
    for ($i=1; $i <size($input); $i++)
    {
        $power = pow($power, $input[$i]);
    }
    return $power;
}

global proc float GetMean(float $input[])
{
    float $mean =$input[0];
    for ($i=1; $i <size($input); $i++)
    {
        $mean +=$input[$i];
    }
    $mean = $mean/size($input);
    return $mean;
}

global proc float GetMedian(float $input[])
{
    int $length = size($input);
    float $temp[];
    for($i=0; $i<$length; $i++)
    {
        $temp[$i] = $input[$i];
    }
    for ($i=0; $i<$length-1; $i++)
    {
        for ($a=0; $a<$length-$i-1; $a++)
        {
            if ($temp[$a] > $temp[$a + 1])
            {
                float $swap = $temp[$a];
                $temp[$a] = $temp[$a + 1];
                $temp[$a + 1] = $swap;
            }
        }
    }
    if ($length % 2 == 1)
    {
        return $temp[$length/2];
    }
    else
    {
        int $even1 = ($length/2)-1;
        int $even2 = ($length/2);
        return ($temp[$even1]+$temp[$even2])/2;
    }
}


global proc string Calculator(string $operation, float $input[])
{   
    float $result;
    string $resultStatement = "";

    for ($i = 0; $i < size($input); $i++)
    {
        $resultStatement += ("" + $input[$i]);

        if ($i < size($input) -1)
        {
            if ($operation == "add")
            {
                $resultStatement += " + ";
            }
            else if ($operation == "subtract")
            {
                $resultStatement += " - ";
            }
            else if ($operation == "multiply")
            {
                $resultStatement += " * ";
            }
            else if ($operation == "divide")
            {
                $resultStatement += " / ";
            }
            else if ($operation == "power")
            {
                $resultStatement += " ^ ";
            }
                else if ($operation == "mean")
            {
                $resultStatement += ", ";
            }
                else if ($operation == "median")
            {
                $resultStatement += ", ";
            }
        }
    }


    if ($operation == "add")
    {
        $result = GetSum($input);
    }
    else if ($operation == "subtract")
    {
        $result = GetDifference($input);
    }
    else if ($operation == "multiply")
    {
        $result = GetProduct($input);
    }
    else if ($operation == "divide")
    {
        $result = GetQuotient($input);
    }
    else if ($operation == "power")
    {
        $result = GetPower($input);
    }
    else if ($operation == "mean")
    {
        $result = GetMean($input);
    }
    else if ($operation == "median")
    {
        $result = GetMedian($input);
    }

    $resultStatement += " = " + string($result);
    return ($resultStatement + "\n");
}

global proc CalcButtonCmd()
{
    // Get the selected operation from the radioButtonGrp
    int $operationIndex = `radioButtonGrp -q -select "operationGroup"`;

    // Get the input array from the textField
    string $array = `textField -q -text "inputField"`;

    // Convert input string into a float array
    string $inputF[] = stringToStringArray($array, ",");
    float $input[];

    for ($i = 0; $i < size($inputF); $i++)
    {
        $input[$i] = float($inputF[$i]);
    }

    // Map the operationIndex to the corresponding operation string
    string $operation;
    if ($operationIndex == 1)
        $operation = "add";
    else if ($operationIndex == 2)
        $operation = "subtract";
    else if ($operationIndex == 3)
        $operation = "multiply";
    else if ($operationIndex == 4)
        $operation = "divide";
    else if ($operationIndex == 5)
        $operation = "power";
    else if ($operationIndex == 6)
        $operation = "mean";
    else if ($operationIndex == 7)
        $operation = "median";

    // Call the Calculator function with the selected operation and input
    string $result = Calculator($operation, $input);
    
    // Print the result to the script editor
    print($result);
}

global proc CalcUI()
{
    string $mWindow = "placeWindow";
    if (`window -exists $mWindow`)
        deleteUI $mWindow;

    $mWindow = `window -title "Calculator" -widthHeight 300 400 -resizeToFitChildren true`;
    
    columnLayout -adjustableColumn true;

    // Text field for input array
    textField -width 280 -height 30 -placeholderText "Enter numbers separated by commas" "inputField";

    // Radio buttons for operation selection
    radioButtonGrp -numberOfRadioButtons 7
                   -label "Select Operation"
                   -labelArray4 "Add" "Subtract" "Multiply" "Divide" -labelArray3 "Power" "Mean" "Median"
                   "operationGroup";

    // Run button to execute calculation
    button -label "Run" -command "CalcButtonCmd()";

    showWindow $mWindow;
};
CalcUI();